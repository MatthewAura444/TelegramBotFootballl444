import asyncio
import logging
import os
from datetime import datetime, timedelta
import json
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler, 
    ContextTypes, MessageHandler, filters
)
from telegram.constants import ParseMode
from dotenv import load_dotenv
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import atexit
import signal
from aiohttp import web

from models import init_db, User, Subscription, async_session
from database_service import DatabaseService
from match_service import MatchService
from payment_service import PaymentService
from sqlalchemy import select, and_

# Load environment variables
load_dotenv()

# Configure logging
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# Initialize services
db_service = DatabaseService()
match_service = MatchService()
payment_service = PaymentService()
payment_service.set_db_service(db_service)

# Admin IDs from environment variables
ADMIN_IDS = []
for i in range(1, 6):
    admin_id = os.getenv(f"ADMIN_ID_{i}")
    if admin_id and admin_id.isdigit():
        ADMIN_IDS.append(int(admin_id))

async def is_admin(user_id):
    """Check if a user is an admin"""
    return user_id in ADMIN_IDS

async def is_user_subscribed(user_id):
    """Check if a user has an active subscription or trial messages"""
    user = await db_service.get_user_by_telegram_id(user_id)
    if not user:
        return False
    has_subscription = await db_service.has_active_subscription(user.id)
    has_trial = user.trial_messages_left > 0
    return has_subscription or has_trial

async def decrement_trial_message(user_id):
    """Decrement a trial message if user is on trial"""
    return await db_service.decrement_trial_message(user_id)

async def send_beautiful_message(update, context, text, reply_markup=None):
    """Send a premium, beautifully formatted message"""
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=text,
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=reply_markup
    )

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    db_user = await db_service.get_or_create_user(
        user.id, user.username, user.first_name, user.last_name
    )
    welcome_text = (
        "*OddFury ‚Äî –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ—É—Ç–±–æ–ª—å–Ω—ã—Ö –º–∞—Ç—á–µ–π –ø–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º.*\n\n"
        "–ë–æ—Ç –∏—â–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–∞–∫–∏–µ —Å–æ—á–µ—Ç–∞–Ω–∏—è –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤:\n"
        "‚Ä¢ 4.25 –∏ 1.225\n"
        "‚Ä¢ 4.22 –∏ 1.225\n\n"
        f"–û—Å—Ç–∞–ª–æ—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: *{db_user.trial_messages_left}*\n\n"
        "–î–ª—è –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É."
    )
    keyboard = [
        [InlineKeyboardButton("üîé –ù–∞–π—Ç–∏ –º–∞—Ç—á–∏", callback_data="find_matches")],
        [InlineKeyboardButton("üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="buy_subscription")]
    ]
    if await is_admin(user.id):
        keyboard.append([InlineKeyboardButton("üîí –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    await send_beautiful_message(update, context, welcome_text, reply_markup)

async def find_matches(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not await is_user_subscribed(user_id):
        await subscription_required(update, context)
        return
    loading_msg = await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="–ü–æ–∏—Å–∫ –º–∞—Ç—á–µ–π...",
        parse_mode=ParseMode.MARKDOWN
    )
    matches = await match_service.check_for_matches_with_target_odds()
    user = await db_service.get_user_by_telegram_id(user_id)
    is_on_trial = user and user.trial_messages_left > 0 and not await db_service.has_active_subscription(user.id)
    if is_on_trial:
        remaining = await decrement_trial_message(user_id)
        trial_msg = f"\n\n–û—Å—Ç–∞–ª–æ—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: *{remaining}*"
        await context.bot.edit_message_text(
            chat_id=update.effective_chat.id,
            message_id=loading_msg.message_id,
            text=f"–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à—ë–Ω.{trial_msg}",
            parse_mode=ParseMode.MARKDOWN
        )
    else:
        await context.bot.edit_message_text(
            chat_id=update.effective_chat.id,
            message_id=loading_msg.message_id,
            text="–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à—ë–Ω.",
            parse_mode=ParseMode.MARKDOWN
        )
    if not matches:
        await send_beautiful_message(
            update, context,
            "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –º–∞—Ç—á–µ–π.\n–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –æ–Ω–∏ –ø–æ—è–≤—è—Ç—Å—è.",
            InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="start")]])
        )
        return
    for match in matches:
        await send_match_info(context.bot, update.effective_chat.id, match)
        await match_service.mark_match_as_notified(match.id)
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="–ü–æ–∫–∞–∑–∞–Ω—ã –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –º–∞—Ç—á–∏.",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="start")]])
    )

async def subscription_required(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="buy_subscription")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="start")]
    ]
    await send_beautiful_message(
        update, context,
        "–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã.",
        InlineKeyboardMarkup(keyboard)
    )

async def buy_subscription(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("1 –Ω–µ–¥–µ–ª—è ‚Äî 650‚ÇΩ", callback_data="sub_week")],
        [InlineKeyboardButton("2 –Ω–µ–¥–µ–ª–∏ ‚Äî 1300‚ÇΩ (—ç–∫–æ–Ω–æ–º–∏—è 300‚ÇΩ)", callback_data="sub_two_weeks")],
        [InlineKeyboardButton("1 –º–µ—Å—è—Ü ‚Äî 2500‚ÇΩ (—ç–∫–æ–Ω–æ–º–∏—è 700‚ÇΩ)", callback_data="sub_month")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="start")]
    ]
    await send_beautiful_message(
        update, context,
        "*–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ OddFury:*",
        InlineKeyboardMarkup(keyboard)
    )

async def process_subscription_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    sub_type = query.data.replace("sub_", "")
    user_id = update.effective_user.id
    payment_info = await payment_service.create_payment_link(user_id, sub_type)
    if not payment_info:
        await send_beautiful_message(
            update, context,
            "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="start")]])
        )
        return
    sub_names = {"week": "1 –Ω–µ–¥–µ–ª—è", "two_weeks": "2 –Ω–µ–¥–µ–ª–∏", "month": "1 –º–µ—Å—è—Ü"}
    sub_name = sub_names.get(sub_type, sub_type)
    payment_text = (
        f"*–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ OddFury: {sub_name}*\n\n"
        f"–°—É–º–º–∞: *{payment_info['amount']}‚ÇΩ*\n"
        + (f"–≠–∫–æ–Ω–æ–º–∏—è: *{payment_info['discount']}‚ÇΩ*\n" if payment_info['discount'] > 0 else "") +
        "\n–ù—É–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω—É–∂–Ω—É—é —Å—É–º–º—É –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –æ–ø–ª–∞—Ç–∏—Ç—å. –ï—Å–ª–∏ –ø–ª–∞—Ç—ë–∂ –±—É–¥–µ—Ç –º–µ–Ω—å—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—É–º–º—ã ‚Äî –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è. –ë—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã!\n\n"
        "–î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ. –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.\n\n"
        f"ID –ø–ª–∞—Ç–µ–∂–∞: `{payment_info['unique_id']}`"
    )
    keyboard = [
        [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=payment_info["payment_url"])],
        [InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=f"check_payment_{payment_info['unique_id']}")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="start")]
    ]
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=payment_text,
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def check_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    unique_id = query.data.replace("check_payment_", "")
    payment_result = await payment_service.check_payment(unique_id)
    if payment_result["success"]:
        sub_types = {"week": "1 –Ω–µ–¥–µ–ª—è", "two_weeks": "2 –Ω–µ–¥–µ–ª–∏", "month": "1 –º–µ—Å—è—Ü"}
        sub_type_name = sub_types.get(payment_result["subscription_type"], payment_result["subscription_type"])
        success_text = (
            f"*–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!*\n\n"
            f"–¢–∏–ø: {sub_type_name}\n"
            f"–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {payment_result['end_date']}\n\n"
            f"–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ OddFury ‚Äî —Å–µ—Ä–≤–∏—Å –ø–æ–∏—Å–∫–∞ —Ñ—É—Ç–±–æ–ª—å–Ω—ã—Ö –º–∞—Ç—á–µ–π –ø–æ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º."
        )
        await send_beautiful_message(update, context, success_text)
        loading_msg = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–ò—â–µ–º –¥–ª—è –≤–∞—Å –ª—É—á—à–∏–µ –º–∞—Ç—á–∏...",
            parse_mode=ParseMode.MARKDOWN
        )
        await asyncio.sleep(2)
        matches = await match_service.check_for_matches_with_target_odds()
        if matches:
            await context.bot.edit_message_text(
                chat_id=update.effective_chat.id,
                message_id=loading_msg.message_id,
                text="–ù–∞–π–¥–µ–Ω—ã –º–∞—Ç—á–∏!",
                parse_mode=ParseMode.MARKDOWN
            )
            for match in matches:
                await send_match_info(context.bot, update.effective_chat.id, match)
                await match_service.mark_match_as_notified(match.id)
        else:
            await context.bot.edit_message_text(
                chat_id=update.effective_chat.id,
                message_id=loading_msg.message_id,
                text="–ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –º–∞—Ç—á–µ–π. –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –æ–Ω–∏ –ø–æ—è–≤—è—Ç—Å—è!",
                parse_mode=ParseMode.MARKDOWN
            )
    else:
        error_text = (
            "–û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –µ—â—ë –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –ø–∞—Ä—É –º–∏–Ω—É—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
        keyboard = [
            [InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—â—ë —Ä–∞–∑", callback_data=f"check_payment_{unique_id}")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="start")]
        ]
        await send_beautiful_message(update, context, error_text, InlineKeyboardMarkup(keyboard))

async def send_match_info(bot, chat_id, match, is_notification=False):
    match_time = match.match_time.strftime("%d.%m.%Y %H:%M")
    prefix = "–ù–û–í–´–ô –ú–ê–¢–ß!\n" if is_notification else ""
    match_text = (
        f"{prefix}*{match.home_team} ‚Äî {match.away_team}*\n"
        f"{match.competition}\n"
        f"{match.match_time.strftime("%d.%m.%Y %H:%M")}\n\n"
        f"–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã:\n"
        f"1: {match.odds_1:.2f}   X: {match.odds_x:.2f}   2: {match.odds_2:.3f}"
    )
    if match.match_url:
        keyboard = [[InlineKeyboardButton("üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –º–∞—Ç—á", url=match.match_url)]]
        reply_markup = InlineKeyboardMarkup(keyboard)
    else:
        reply_markup = None
    await bot.send_message(
        chat_id=chat_id,
        text=match_text,
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=reply_markup
    )

async def notify_users_about_new_matches(context: ContextTypes.DEFAULT_TYPE):
    """Check for new matches and notify subscribed users"""
    try:
        # Fetch new matches first
        await match_service.fetch_matches()
        
        # Get matches with target odds
        matches = await match_service.check_for_matches_with_target_odds()
        
        if not matches:
            logger.info("No new matches with target odds found")
            return
        
        # Get all users with active subscriptions
        async with async_session() as session:
            # Find users with active subscriptions
            result = await session.execute(
                select(User).join(Subscription).where(
                    Subscription.end_date >= datetime.utcnow()
                ).distinct()
            )
            subscribed_users = result.scalars().all()
            
            for match in matches:
                logger.info(f"Notifying users about match: {match.home_team} vs {match.away_team}")
                
                # Notify each user with active subscription
                for user in subscribed_users:
                    try:
                        await send_match_info(context.bot, user.telegram_id, match, is_notification=True)
                    except Exception as e:
                        logger.error(f"Failed to notify user {user.telegram_id}: {e}")
                
                # Mark match as notified
                await match_service.mark_match_as_notified(match.id)
                
        logger.info(f"Notified {len(subscribed_users)} users about {len(matches)} matches")
    
    except Exception as e:
        logger.error(f"Error in notify_users_about_new_matches: {e}")

async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not await is_admin(user_id):
        await send_beautiful_message(
            update, context,
            "‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–µ–º–∏—É–º-–∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.",
            InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="start")]])
        )
        return
    keyboard = [
        [InlineKeyboardButton("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ üìä", callback_data="admin_stats")],
        [InlineKeyboardButton("–í—ã–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É ‚ûï", callback_data="admin_give_sub")],
        [InlineKeyboardButton("–ê–Ω–Ω—É–ª–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É ‚ûñ", callback_data="admin_revoke_sub")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="start")]
    ]
    await send_beautiful_message(
        update, context,
        "üîí *–ü—Ä–µ–º–∏—É–º-–∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å OddFury*",
        InlineKeyboardMarkup(keyboard)
    )

async def admin_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not await is_admin(user_id):
        await send_beautiful_message(update, context, "‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return
    stats = await db_service.get_weekly_stats()
    stats_text = (
        f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ OddFury –∑–∞ –Ω–µ–¥–µ–ª—é*\n"
        f"–ü–µ—Ä–∏–æ–¥: {stats['week_start']} ‚Äî {stats['week_end']}\n\n"
        f"üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {stats['active_subscriptions']}\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏: {stats['inactive_users']}\n"
        f"üÜï –ù–æ–≤—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {stats['new_subscriptions']}\n"
    )
    if stats['most_popular_subscription']:
        sub_types = {"week": "1 –Ω–µ–¥–µ–ª—è", "two_weeks": "2 –Ω–µ–¥–µ–ª–∏", "month": "1 –º–µ—Å—è—Ü"}
        most_popular = sub_types.get(stats['most_popular_subscription'], stats['most_popular_subscription'])
        stats_text += f"üîù –°–∞–º–∞—è –ø–æ–ø—É–ª—è—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞: {most_popular}"
    else:
        stats_text += "üîù –°–∞–º–∞—è –ø–æ–ø—É–ª—è—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")]]
    await send_beautiful_message(update, context, stats_text, InlineKeyboardMarkup(keyboard))

async def admin_give_subscription(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not await is_admin(user_id):
        await send_beautiful_message(update, context, "‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return
    context.user_data["admin_give_sub"] = True
    await send_beautiful_message(
        update, context,
        "üë§ –í–≤–µ–¥–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ–∑ @), –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–¥–∞—Ç—å –ø—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫—É:",
        InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="admin_panel")]])
    )

async def handle_admin_give_sub_username(update: Update, context: ContextTypes.DEFAULT_TYPE):
    username = update.message.text.strip().replace("@", "")
    context.user_data["sub_username"] = username
    keyboard = [
        [InlineKeyboardButton("1 –Ω–µ–¥–µ–ª—è", callback_data="admin_give_week")],
        [InlineKeyboardButton("2 –Ω–µ–¥–µ–ª–∏", callback_data="admin_give_two_weeks")],
        [InlineKeyboardButton("1 –º–µ—Å—è—Ü", callback_data="admin_give_month")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="admin_panel")]
    ]
    await send_beautiful_message(
        update, context,
        "‚è±Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –ø—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è @{username}:",
        InlineKeyboardMarkup(keyboard)
    )
    context.user_data.pop("admin_give_sub", None)

async def admin_process_give_subscription(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    sub_type = query.data.replace("admin_give_", "")
    username = context.user_data.get("sub_username", "").strip()
    if not username:
        await send_beautiful_message(
            update, context,
            "‚ùå –ù–µ —É–∫–∞–∑–∞–Ω–æ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
            InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")]])
        )
        return
    result = await db_service.admin_create_subscription(username, sub_type)
    if not result:
        await send_beautiful_message(
            update, context,
            f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")]])
        )
        return
    subscription, user_telegram_id = result
    sub_types = {"week": "1 –Ω–µ–¥–µ–ª—è", "two_weeks": "2 –Ω–µ–¥–µ–ª–∏", "month": "1 –º–µ—Å—è—Ü"}
    sub_name = sub_types.get(sub_type, sub_type)
    end_date = subscription.end_date.strftime("%d.%m.%Y %H:%M")
    admin_text = (
        f"*–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{username}*\n"
        f"–¢–∏–ø: {sub_name}\n–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {end_date}"
    )
    await send_beautiful_message(
        update, context,
        admin_text,
        InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")]])
    )
    user_text = (
        f"*–í–∞–º –≤—ã–¥–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ OddFury!*\n\n"
        f"–¢–∏–ø: {sub_name}\n–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {end_date}\n\n"
        f"–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ OddFury."
    )
    try:
        await context.bot.send_message(
            chat_id=user_telegram_id,
            text=user_text,
            parse_mode=ParseMode.MARKDOWN
        )
    except Exception as e:
        logger.error(f"Failed to send notification to user {user_telegram_id}: {e}")
    if "sub_username" in context.user_data:
        del context.user_data["sub_username"]

async def admin_revoke_subscription(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not await is_admin(user_id):
        await send_beautiful_message(update, context, "‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return
    context.user_data["admin_revoke_sub"] = True
    await send_beautiful_message(
        update, context,
        "üë§ –í–≤–µ–¥–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ–∑ @) –¥–ª—è –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫–∏:",
        InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="admin_panel")]])
    )

async def handle_admin_revoke_sub_username(update: Update, context: ContextTypes.DEFAULT_TYPE):
    username = update.message.text.strip().replace("@", "")
    user_telegram_id = await db_service.revoke_subscription(username)
    if not user_telegram_id:
        await send_beautiful_message(
            update, context,
            f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –Ω–µ–≥–æ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.",
            InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")]])
        )
        return
    admin_text = f"*–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username} –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω–∞.*"
    await send_beautiful_message(
        update, context,
        admin_text,
        InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")]])
    )
    user_text = (
        "*–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ OddFury –±—ã–ª–∞ –∞–Ω–Ω—É–ª–∏—Ä–æ–≤–∞–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.*\n\n"
        "–ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ —ç—Ç–æ –æ—à–∏–±–∫–æ–π ‚Äî —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π OddFury."
    )
    try:
        await context.bot.send_message(
            chat_id=user_telegram_id,
            text=user_text,
            parse_mode=ParseMode.MARKDOWN
        )
    except Exception as e:
        logger.error(f"Failed to send notification to user {user_telegram_id}: {e}")
    context.user_data.pop("admin_revoke_sub", None)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle text messages for admin operations"""
    # Check if we're waiting for a username for giving subscription
    if context.user_data.get("admin_give_sub"):
        await handle_admin_give_sub_username(update, context)
        return
        
    # Check if we're waiting for a username for revoking subscription
    if context.user_data.get("admin_revoke_sub"):
        await handle_admin_revoke_sub_username(update, context)
        return
        
    # Default response for other messages
    await start(update, context)

async def button_click(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle callback queries from inline keyboards"""
    query = update.callback_query
    await query.answer()
    
    callback_data = query.data
    
    if callback_data == "start":
        await start(update, context)
    elif callback_data == "find_matches":
        await find_matches(update, context)
    elif callback_data == "buy_subscription":
        await buy_subscription(update, context)
    elif callback_data.startswith("sub_"):
        await process_subscription_selection(update, context)
    elif callback_data.startswith("check_payment_"):
        await check_payment(update, context)
    elif callback_data == "admin_panel":
        await admin_panel(update, context)
    elif callback_data == "admin_stats":
        await admin_stats(update, context)
    elif callback_data == "admin_give_sub":
        await admin_give_subscription(update, context)
    elif callback_data == "admin_revoke_sub":
        await admin_revoke_subscription(update, context)
    elif callback_data.startswith("admin_give_"):
        await admin_process_give_subscription(update, context)

async def weekly_stats_job(context: ContextTypes.DEFAULT_TYPE):
    """Send weekly stats to all admins"""
    # Get statistics
    stats = await db_service.get_weekly_stats()
    
    stats_text = f"üìä *–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç ({stats['week_start']} - {stats['week_end']})*\n\n"
    stats_text += f"üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {stats['active_subscriptions']}\n"
    stats_text += f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏: {stats['inactive_users']}\n"
    stats_text += f"üÜï –ù–æ–≤—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –∑–∞ –Ω–µ–¥–µ–ª—é: {stats['new_subscriptions']}\n"
    
    if stats['most_popular_subscription']:
        sub_types = {
            "week": "1 –Ω–µ–¥–µ–ª—è",
            "two_weeks": "2 –Ω–µ–¥–µ–ª–∏",
            "month": "1 –º–µ—Å—è—Ü"
        }
        most_popular = sub_types.get(stats['most_popular_subscription'], stats['most_popular_subscription'])
        stats_text += f"üîù –°–∞–º–∞—è –ø–æ–ø—É–ª—è—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞: {most_popular}"
    else:
        stats_text += "üîù –°–∞–º–∞—è –ø–æ–ø—É–ª—è—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
    
    # Send to all admins
    for admin_id in ADMIN_IDS:
        try:
            await context.bot.send_message(
                chat_id=admin_id,
                text=stats_text,
                parse_mode=ParseMode.MARKDOWN
            )
        except Exception as e:
            logger.error(f"Failed to send weekly stats to admin {admin_id}: {e}")

async def fetch_matches_job(context: ContextTypes.DEFAULT_TYPE):
    """Job to fetch new football matches periodically"""
    try:
        await match_service.fetch_matches()
        logger.info("Scheduled match fetching completed")
    except Exception as e:
        logger.error(f"Error in scheduled match fetching: {e}")

async def send_subscription_expiry_notification(context: ContextTypes.DEFAULT_TYPE):
    """Send notification to users whose subscription is about to expire"""
    try:
        # Notify users 1 day before expiry
        expiry_threshold = datetime.utcnow() + timedelta(days=1)
        
        async with async_session() as session:
            # Find subscriptions that expire in approximately 24 hours
            result = await session.execute(
                select(Subscription, User).join(User).where(
                    and_(
                        Subscription.end_date <= expiry_threshold,
                        Subscription.end_date >= datetime.utcnow()
                    )
                )
            )
            
            expiring_subscriptions = result.all()
            
            for subscription, user in expiring_subscriptions:
                # Format the expiry date
                expiry_date = subscription.end_date.strftime("%d.%m.%Y %H:%M")
                
                # Subscription type
                sub_types = {
                    "week": "1 –Ω–µ–¥–µ–ª—è",
                    "two_weeks": "2 –Ω–µ–¥–µ–ª–∏",
                    "month": "1 –º–µ—Å—è—Ü"
                }
                sub_type = sub_types.get(subscription.subscription_type, subscription.subscription_type)
                
                # Create expiry notification message
                expiry_text = f"‚ö†Ô∏è *–í–Ω–∏–º–∞–Ω–∏–µ! –°—Ä–æ–∫ –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è*\n\n"
                expiry_text += f"–¢–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏: {sub_type}\n"
                expiry_text += f"–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –¥–æ: {expiry_date}\n\n"
                expiry_text += "–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—É—á–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ç—á–∞—Ö, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É."
                
                # Create inline keyboard for renewal
                keyboard = [
                    [InlineKeyboardButton("üí∞ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="buy_subscription")],
                    [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="start")]
                ]
                
                # Send notification
                try:
                    await context.bot.send_message(
                        chat_id=user.telegram_id,
                        text=expiry_text,
                        parse_mode=ParseMode.MARKDOWN,
                        reply_markup=InlineKeyboardMarkup(keyboard)
                    )
                    logger.info(f"Sent expiry notification to user {user.telegram_id}")
                except Exception as e:
                    logger.error(f"Failed to send expiry notification to user {user.telegram_id}: {e}")
    
    except Exception as e:
        logger.error(f"Error in send_subscription_expiry_notification: {e}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π error handler
async def error_handler(update, context):
    """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ Telegram. –õ–æ–≥–∏—Ä—É–µ—Ç –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –∞–¥–º–∏–Ω–∞."""
    logger.error(f"Exception: {context.error}", exc_info=True)
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É (–µ—Å–ª–∏ –∑–∞–¥–∞–Ω)
    if ADMIN_IDS:
        try:
            await context.bot.send_message(
                chat_id=ADMIN_IDS[0],
                text=f"‚ùóÔ∏è Exception: {context.error}\n{getattr(update, 'effective_user', None)}"
            )
        except Exception as e:
            logger.error(f"Failed to notify admin: {e}")

# Healthcheck endpoint
async def healthcheck(request):
    return web.Response(text="OK", status=200)

def run_healthcheck_server():
    app = web.Application()
    app.router.add_get("/health", healthcheck)
    runner = web.AppRunner(app)
    loop = asyncio.get_event_loop()
    loop.run_until_complete(runner.setup())
    site = web.TCPSite(runner, "0.0.0.0", 8080)
    loop.run_until_complete(site.start())
    logger.info("Healthcheck endpoint running on :8080/health")

# Graceful shutdown
should_exit = False
def handle_signal(sig, frame):
    global should_exit
    logger.info(f"Received signal {sig}, shutting down...")
    should_exit = True

signal.signal(signal.SIGINT, handle_signal)
signal.signal(signal.SIGTERM, handle_signal)

async def async_init():
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤ –∏ –ë–î."""
    await db_service.initialize()
    await match_service.api_client.fetch_matches()  # warmup
    await payment_service.initialize()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞. –ó–∞–ø—É—Å–∫–∞–µ—Ç Telegram-–±–æ—Ç–∞, healthcheck –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á."""
    import asyncio
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    loop.run_until_complete(async_init())
    application = Application.builder().token(os.getenv("BOT_TOKEN")).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_click))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_error_handler(error_handler)
    scheduler = AsyncIOScheduler(event_loop=loop)
    scheduler.add_job(
        lambda: asyncio.create_task(fetch_matches_job(application)),
        'interval', 
        hours=3, 
        id='fetch_matches'
    )
    scheduler.add_job(
        lambda: asyncio.create_task(notify_users_about_new_matches(application)),
        'interval', 
        hours=1, 
        id='notify_new_matches'
    )
    scheduler.add_job(
        lambda: asyncio.create_task(send_subscription_expiry_notification(application)),
        'cron',
        hour=10,
        minute=0,
        id='subscription_expiry_notification'
    )
    scheduler.add_job(
        lambda: asyncio.create_task(weekly_stats_job(application)), 
        'cron', 
        day_of_week='mon', 
        hour=9, 
        minute=0, 
        id='weekly_stats'
    )
    scheduler.start()
    import threading
    threading.Thread(target=run_healthcheck_server, daemon=True).start()
    import atexit
    def cleanup():
        loop.run_until_complete(match_service.api_client.fetch_matches())
        loop.run_until_complete(payment_service.close())
        loop.run_until_complete(db_service.close())
    atexit.register(cleanup)
    application.run_polling()
    # Graceful shutdown loop
    global should_exit
    while not should_exit:
        try:
            loop.run_until_complete(asyncio.sleep(1))
        except KeyboardInterrupt:
            break
    logger.info("Bot stopped.")

if __name__ == "__main__":
    main() 